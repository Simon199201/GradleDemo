apply plugin: 'com.android.application'
import static BuildUtils.*
android {
    compileSdkVersion 27
    defaultConfig {
        BuildUtils buildUtils = new BuildUtils()
        applicationId "com.example.simon.gradledemo2"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode getVersionCode1()
        versionName buildUtils.getVersionName2()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    //配置签名
    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword "orion123456"
            keyAlias "orion"
            keyPassword "orion123456"
        }
        staging{
            storeFile file("release.keystore")
        }

    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
//            shrinkResources true
            minifyEnabled true //为true才能使用shrinkResources
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        staging.initWith(buildTypes.debug)
        staging {
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            debuggable = false
            minifyEnabled false
        }
    }
    //多维度结合
    flavorDimensions "color","price"
    productFlavors {
        red {
            dimension("color")
        }
        blue {
            dimension "color"
        }
        free {
            dimension "price"
        }
        paid {
            dimension "price"
        }
    }
}
//如果仓库有密码，也可以同时传入用户名和密码
repositories {
    maven {
        url "http://repo.acmecorp.com/maven2"
        credentials {
            username 'user'
            password 'secretpassword'
        }
    }
    //本地仓库
    flatDir {
        dirs 'aars'
    }
}
//我们在引用库的时候，每个库名称包含三个元素：组名:库名称:版本号,如下：
dependencies {
    //通配符
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

}
task hello {
    println("hello task")
}
task hello1{
    println 'Configuration'
    doLast {
        println('GoodBye')
    }
    doFirst {
        println('Hello')
    }

}
task task1 <<{
    println('task1')
}

task task2 <<{
    println('task2')
}
//task2.mustRunAfter task1
task2.dependsOn task1